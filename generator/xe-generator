<?php
$commands		= array('module', 'widget', 'addon');
$parameters		= array(
						'module' => array('basic','developer','demo'),
						'widget' => array(),
						'addon'  => array()
						);
$commands_help 	= array(
						'module' => 'Helps you generate a module',
						'widget' => 'Helps you generate a widget',
						'addon'  => 'Helps you generate an addon'
						);			   
$parameters_help = array(
						'module.basic'		=> 'Create an empty module (only the structure)',
						'module.developer'	=> 'Create a module with a standard BE',
						'module.demo'		=> 'Create a demo module (recommended for getting started)'
						);
						
function print_usage($what = '')
{	global $commands,$parameters,$commands_help,$parameters_help;
	$argc = $_SERVER['argc'];
	$argv = $_SERVER['argv'];
	
	if (strlen($what) == 0)
	{
		echo "\n\n";
		echo "You need to give some command\n";
		echo "Usage: php $argv[0] COMMAND [options]\n\n";
		echo "List of Commands:\n\n";
		
		$lengths = array_map('strlen', $commands);
		$max_length = max($lengths);
		
		foreach($commands as $cmd)
		{
			echo $cmd;
			for ($counter =0;$counter < ($max_length - strlen($cmd));$counter++)
				echo ' ';
			echo "\t";
			echo $commands_help[$cmd]."\n";
		}
	
		echo "\n\n";
		
		exit(0);
	}
	
	$lengths = array_map('strlen', $parameters[$what]);
	$max_length = max($lengths);
	
	echo "\n\n";	
	foreach ($parameters[$what] as $param)
	{
		echo $param;
		for ($counter =0;$counter < ($max_length - strlen($param));$counter++)
			echo ' ';
		echo "\t";
		echo $parameters_help[$what.'.'.$param]."\n";
		
	}
	
	echo "\n\n";
	
	exit(0);
}

function parse_arguments()
{	global $commands,$parameters;
	$argc = $_SERVER['argc'];
	$argv = $_SERVER['argv'];
	
	if ($argc == 1)
	{
		print_usage();
		return;
	}
	
	if (!in_array($argv[1],$commands))
		print_usage();
		
	if (!empty($parameters[$argv[1]]) && $argc == 2)
		print_usage($argv[1]);
		
	$func_name = 'generate_'.$argv[1];
	if (!empty($parameters[$argv[1]]))
		$func_name = $func_name.'_'.$argv[2];
	
	if (!function_exists($func_name))
	{
		echo "Function not implemented\nApplication will exit\n\n";
		exit(0);
	}
	
	call_user_func($func_name);
}

function parse_additional_options($parameters_offset)
{
	$argc = $_SERVER['argc'];
	$argv = $_SERVER['argv'];
	
	$retVal = array();
	for ($counter = $parameters_offset;$counter < $argc;$counter+=2)
	{
		if (($counter+1) < $argc)
			$retVal[$argv[$counter]] = $argv[$counter+1];
	}
	return $retVal;
}

$global_templates_xml = NULL;
$global_variable = NULL;

function rd_tpls_start_tag($parser, $name, $attrs)
{
	global $global_templates_xml;
	global $global_variable;
	switch($name)
	{
		case 'PARAMETERS':
			$global_templates_xml['parameters'] = array();
			break;
		case 'PARAMETER':
			$global_templates_xml['parameters'][$attrs['ID']] = array($attrs['DESCRIPTION'],$attrs['OPTION_NAME'],$attrs['VARIABLE_NAME'],$attrs['REQUIRED']);
			break;
		case 'FOLDERS':
			$global_templates_xml['folders'] = array();
			break;
		case 'FOLDER':
			$global_templates_xml['folders'][] = $attrs['RELATIVE_PATH'];
			break;
		case 'FILES':
			$global_templates_xml['files'] = array();
			break;
		case 'FILE':
			$global_templates_xml['files'][$attrs['RELATIVE_PATH']][0] = array();
			$global_variable = $attrs['RELATIVE_PATH'];
			if (isset($attrs['REPLACE_FILE_NAME_WITH_PARAM_ID']))
				$global_templates_xml['files'][$attrs['RELATIVE_PATH']][1] = $attrs['REPLACE_FILE_NAME_WITH_PARAM_ID'];
			break;
		case 'PARAM':
			$global_templates_xml['files'][$global_variable][0][] = $attrs['ID'];
			break;
	}
	
}

function read_templates_xml_file($file_name)
{
	global $global_templates_xml;
	global $global_variable;
	$xml_parser = xml_parser_create();
	$global_variable = array();
	xml_set_element_handler($xml_parser, "rd_tpls_start_tag", FALSE);
	
	if (!($fp = fopen($file_name, "r"))) 
	{
		die("Error: Could not open XML input file - $file_name");
	}
	while ($data = fread($fp, 4096)) 
	{
		if (!xml_parse($xml_parser, $data, feof($fp))) 
		{
			die(sprintf("XML error: %s at line %d",
						xml_error_string(xml_get_error_code($xml_parser)),
						xml_get_current_line_number($xml_parser)));
		}
	}
	fclose($fp);
	xml_parser_free($xml_parser);
}


function get_templates_parameters()
{
	global $global_templates_xml;
	$return_value = array();

	foreach(array_keys($global_templates_xml['parameters']) as $param)
	{
		$return_value[$global_templates_xml['parameters'][$param][1]] = array( ($global_templates_xml['parameters'][$param][3]=='true'), $global_templates_xml['parameters'][$param][0]);
	}
	
	return $return_value;
}

function print_usage_options($options)
{
	echo "\n\n";
	echo "Invalid options. Please see below the list of possible options\n\n";
		
	$lengths = array_map('strlen', array_keys($options));
	$max_length = max($lengths);
		
	foreach(array_keys($options) as $opt)
	{
		echo ($options[$opt][0])?' ':'[';
		echo $opt;
		echo ($options[$opt][0])?' ':']';
		
		for ($counter =0;$counter < ($max_length - strlen($opt));$counter++)
			echo ' ';
		echo "\t";
		echo $options[$opt][1]."\n";
	}
	echo "\n\n";
	exit(0);
}

function map_parameters_values($options)
{
	global $global_templates_xml;
	$return_value = array();

	foreach(array_keys($global_templates_xml['parameters']) as $param)
	{
		$option_name = $global_templates_xml['parameters'][$param][1];
		$return_value[$param] = array(($global_templates_xml['parameters'][$param][3]=='true'), isset($options[$option_name])?$options[$option_name]:'');
	}
	
	return $return_value;
}

function generate_item_from_templates($templates_xml_file_name,$templates_base_dir,$item_type)
{
	global $global_templates_xml;
	$command_line_options = parse_additional_options(3);
	read_templates_xml_file($templates_xml_file_name);
	$parameters = get_templates_parameters();
	
	$required_parameters = array();
	foreach(array_keys($parameters) as $param)
	{
		if ($parameters[$param][0])
			$required_parameters[] = $param;
	}
	if (count($required_parameters) > count($command_line_options) || count(array_diff($required_parameters,array_keys($command_line_options)))>0)
		print_usage_options($parameters);
		
	$parameters_values = map_parameters_values($command_line_options);
	
	if (@mkdir('./'.$parameters_values['name'][1].'/',0777)==FALSE)
		die("Error: Could not create new module's folder\n");
	
	foreach($global_templates_xml['folders'] as $folder)
	{
		if (@mkdir('./'.$parameters_values['name'][1].'/'.$folder,0777,TRUE)==FALSE)
			die("Error: Could not create new module's sub-folders structure\n");
	}
	
	foreach(array_keys($global_templates_xml['files']) as $file)
	{
		$source_name = $file;
		if (isset($global_templates_xml['files'][$file][1]))
			$destination_name = str_replace('template',$parameters_values[$global_templates_xml['files'][$file][1]][1],$source_name);
		else
			$destination_name = $file;
		
		if ( ($data = file_get_contents($templates_base_dir.$source_name)) === FALSE)
			die("Error: could not open template file for read\n");
		
		foreach($global_templates_xml['files'][$file][0] as $param)
		{
			$data = str_replace($global_templates_xml['parameters'][$param][2],$parameters_values[$param][1],$data);
		}
		
		if ( (file_put_contents('./'.$parameters_values['name'][1].'/'.$destination_name,$data)) === FALSE)
			die("Error: could not open module file for write\n");
	}
	
	echo "\n\n{$item_type} called {$parameters_values['name'][1]} generated successfully in ".'./'.$parameters_values['name'][1].'/'."\n\n";
}

define("MODULE_TEMPLATES_XML_FILE_NAME_BASIC","./module-templates-basic.xml");

function generate_module_basic()
{
	generate_item_from_templates(MODULE_TEMPLATES_XML_FILE_NAME_BASIC,'./module-templates-basic/','Basic module');
}

function generate_module_developer()
{
	$argc = $_SERVER['argc'];
	$argv = $_SERVER['argv'];
}

function generate_module_demo()
{
	$argc = $_SERVER['argc'];
	$argv = $_SERVER['argv'];
}

parse_arguments();

?>
